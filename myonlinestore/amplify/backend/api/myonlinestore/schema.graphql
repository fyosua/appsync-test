# type Book @model
# @auth(
#   rules: [
#     { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
#     { allow: groups, groups: ["user"], operations: [read] }
#   ]
# ) {
#   id: ID!
#   title: String!
#   description: String
#   price: Float!
#   author: String!
# }

# type Order @model
# @auth(
#   rules: [
#     { allow: groups, groups: ["admin"] }
#     { allow: groups, groups: ["user"] }
#   ]
# ) {
#   id: ID!
#   books: [Book] @hasMany
#   total: Float!
# }


# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Order @model
@auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    { allow: groups, groups: ["user"], operations: [read] }
  ]
){
  id: ID!
  customerID: ID! @index(name: "byCustomerByStatusByDate", sortKeyFields: ["status", "date"]) @index(name: "byCustomerByDate", sortKeyFields: ["date"])
  accountRepresentativeID: ID! @index(name: "byRepresentativebyDate", sortKeyFields: ["date"])
  productID: ID! @index(name: "byProduct", sortKeyFields: ["id"])
  status: String!
  amount: Int!
  date: String!
}

type Customer @model
@auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    { allow: groups, groups: ["user"], operations: [read] }
  ]
){
  id: ID!
  name: String!
  phoneNumber: String
  accountRepresentativeID: ID! @index(name: "byRepresentative", sortKeyFields: ["id"])
  ordersByDate: [Order] @hasMany(indexName: "byCustomerByDate", fields: ["id"])
  ordersByStatusDate: [Order] @hasMany(indexName: "byCustomerByStatusByDate", fields: ["id"])
}

type Employee @model
@auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    { allow: groups, groups: ["user"], operations: [read] }
  ]
){
  id: ID!
  name: String! @index(name: "byName", queryField: "employeeByName", sortKeyFields: ["id"])
  startDate: String!
  phoneNumber: String!
  warehouseID: ID! @index(name: "byWarehouse", sortKeyFields: ["id"])
  jobTitle: String! @index(name: "byTitle", queryField: "employeesByJobTitle", sortKeyFields: ["id"])
  newHire: String! @index(name: "newHire", queryField: "employeesNewHire", sortKeyFields: ["id"]) @index(name: "newHireByStartDate", queryField: "employeesNewHireByStartDate", sortKeyFields: ["startDate"])
}

type Warehouse @model
@auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    { allow: groups, groups: ["user"], operations: [read] }
  ]
){
  id: ID!
  employees: [Employee] @hasMany(indexName: "byWarehouse", fields: ["id"])
}

type AccountRepresentative @model
@auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    { allow: groups, groups: ["user"], operations: [read] }
  ]
){
  id: ID!
  customers: [Customer] @hasMany(indexName: "byRepresentative", fields: ["id"])
  orders: [Order] @hasMany(indexName: "byRepresentativebyDate", fields: ["id"])
  orderTotal: Int
  salesPeriod: String @index(name: "bySalesPeriodByOrderTotal", queryField: "repsByPeriodAndTotal", sortKeyFields: ["orderTotal"])
}

type Inventory @model
@auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    { allow: groups, groups: ["user"], operations: [read] }
  ]
){
  productID: ID! @primaryKey(sortKeyFields: ["warehouseID"])
  warehouseID: ID! @index(name: "byWarehouseID", queryField: "itemsByWarehouseID")
  inventoryAmount: Int!
}

type Product @model
@auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    { allow: groups, groups: ["user"], operations: [read] }
  ]
){
  id: ID!
  name: String!
  orders: [Order] @hasMany(indexName: "byProduct", fields: ["id"])
  inventories: [Inventory] @hasMany(fields: ["id"])
}